from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from utils.db import get_student, add_or_update_student
from keyboards.main_menu import get_main_menu
from keyboards.groups_kb import get_directions_keyboard, get_groups_keyboard
from states.data_edit import EditState
from .schedule_handler import schedule_of_the_day  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

def register_menu_handler(router: Router):
    @router.message(lambda message: message.text.startswith("‚úè –ò–∑–º–µ–Ω–µ–Ω–∏—è"))
    async def send_daily_schedule(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        student = get_student(user_id)
        if student:
            group = student[3]
            await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}:\n" + "\n".join(schedule_of_the_day(group)))
        else:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        
    @router.message(lambda message: message.text.startswith("üéì –ò–º—è"))
    async def change_name(message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        await state.set_state(EditState.waiting_for_name)

    @router.message(EditState.waiting_for_name)
    async def update_name(message: types.Message, state: FSMContext):
        new_name = message.text
        user_id = message.from_user.id
        student = get_student(user_id)
        if student:
            _, group_name, _ = student[2], student[3], student[4]
            add_or_update_student(user_id, new_name, group_name)
            await message.answer(f"–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}!", reply_markup=get_main_menu(True, new_name, group_name))
        await state.clear()

    @router.message(lambda message: message.text.startswith("üíº –ì—Ä—É–ø–ø–∞"))
    async def change_group(message: types.Message, state: FSMContext):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.", reply_markup=get_directions_keyboard())
        await state.set_state(EditState.waiting_for_direction)

    @router.callback_query(EditState.waiting_for_direction)
    async def process_direction(callback_query: types.CallbackQuery, state: FSMContext):
        direction = callback_query.data.split(":")[1]
        await state.update_data(direction=direction)
        await callback_query.message.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É.", reply_markup=get_groups_keyboard(direction))
        await state.set_state(EditState.waiting_for_group)

    @router.callback_query(EditState.waiting_for_group)
    async def update_group(callback_query: types.CallbackQuery, state: FSMContext):
        new_group = callback_query.data.split(":")[1]
        user_id = callback_query.from_user.id
        student = get_student(user_id)
        if student:
            name = student[2]
            add_or_update_student(user_id, name, new_group)
            await callback_query.message.delete()
            await callback_query.message.answer(f"–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_group}!", reply_markup=get_main_menu(True, name, new_group))
        await state.clear()
